생명주기

1. 나타날때 (Mounting)
2. 업데이트 될때(Updating)
3. 사라질 떄(Unmounting)

이 중간중간 과정에서 작업을 하고 싶을 때 lifeCycle을 사용함

constructor()
컴포넌트가 만들어지는 순간 가장 먼저 실행되는 함수
컴포넌트가 가지고 있을 state들을 초기 설정을 한다던지 미리해야될 작업이 있다면 constructor에서 처리함
(mounting)


getDerivedStateFromProps()
this.setState같은 것을 하는 것이 아니라  어떠한 객체를 바로 리턴해주면 된다.
객체를 리턴해주면 그 객체값이 state로 들어가지게 됨

props로 받은 값을 state에다가 동결시키고싶다 할때 사용
(마운팅 과정에서도 사용되고 업데이트 과정에서도 props가 바뀌게 되면은 실행됨)

render()
어떠한 돔을 만들게 될지 내부에있는 태그들에게 어떠한 값을 전달해줄지 정의해준다
브라우저상에 나타나게 되면은 componentDidMount()함수가 호출이 된다.

componentDidMount()

외부라이브러리 연동, 컴포넌트에서 필요한 데이터 요청, DOM에 관련된 작업

외부를 라이브러리를 사용할때 주로 사용 (특정돔에다가 ~~를 그려주세요)
API사용 혹은 Ajax사용을 해야될떄 주로 사용
브라우저상에 돔이 나타난 시점에 어떠한 작업을 실행할떄 주로 사용
특정이벤트(스크롤 이벤트, 클릭이벤트 등)를 리스닝

shouldComponentUpdate()중요!
return false - 업데이트 안함
return true - 업데이트 함
업데이트를 막아줄수 있는 함수 기본값 true
특정조건에 따라 렌더링을 막아줄수있는 함수

컴포넌트가 업데이트 되는 성능을 최적화 시키고 싶을 때 사용
부모컴포넌트라 렌더링되면 부모컴포넌트의 자식컴포넌트 모두 리렝더링 되게 되어있다
virtual돔에 그리는 것 조차도 성능을 아끼고싶을 때 사용

getSnapshotBeforeUpdate()
컴포넌트가 렌더링되고 DOM상에 반영되기 바로 직전에 호출되는 함수
업데이트되기 바로직전의 돔상태를 리턴시켜 나중에 componentDidUpdate에서 받아올수 있다
렌더링후 업데이트를 반영하기전에 스크롤의 위치나 해당 돔의 크기 등을 사전에 가지고 오고 싶을떄 사용

componentDidUpdate()
컴포넌트가 호출되고 난 후에 발생
state가 바뀌었을떄 이전의 상태와 지금의 상태가 바뀌었을 떄 실행

componentWillUnmount()
Unmonting상태에서 실행
componentDidMount에서 설정한 작업을 없앨떄 사용

componentDidCatch()
오류를 잡아줌
render()함수에서 오류가 발생하게 되면 앱자체가 터진다
에러가 발생할수 있는 컴포넌트의 부모컴포넌트에서 사용해야한다.
실제로 잡지못했던 버그들을 잡을때 사용
에러가난후 페이지 
api를 통해서 오류내용 날리기